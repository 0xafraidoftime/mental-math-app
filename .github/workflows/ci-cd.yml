name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  MONGODB_URI: mongodb://localhost:27017/mentalmath_test
  JWT_SECRET: test-secret-key

jobs:
  # Lint and Format Check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Lint client
      run: cd client && npm run lint

    - name: Lint server
      run: cd server && npm run lint

    - name: Check formatting
      run: |
        cd client && npm run format -- --check
        cd ../server && npm run format -- --check

  # Unit Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: mentalmath_test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Run client tests
      run: cd client && npm test -- --coverage --watchAll=false

    - name: Run server tests
      run: cd server && npm test -- --coverage
      env:
        MONGODB_URI: ${{ env.MONGODB_URI }}
        JWT_SECRET: ${{ env.JWT_SECRET }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Build client
      run: cd client && npm run build

    - name: Build server
      run: cd server && npm run build

    - name: Archive client build
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/

    - name: Archive server build
      uses: actions/upload-artifact@v4
      with:
        name: server-build
        path: server/dist/

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Run security audit
      run: |
        npm audit --audit-level=high
        cd client && npm audit --audit-level=high
        cd ../server && npm audit --audit-level=high

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging-mentalmath.herokuapp.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download client build
      uses: actions/download-artifact@v4
      with:
        name: client-build
        path: client/build/

    - name: Download server build
      uses: actions/download-artifact@v4
      with:
        name: server-build
        path: server/dist/

    - name: Deploy to Heroku Staging
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: mental-math-staging
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: false
        appdir: "."

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://mentalmath.herokuapp.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download client build
      uses: actions/download-artifact@v4
      with:
        name: client-build
        path: client/build/

    - name: Download server build
      uses: actions/download-artifact@v4
      with:
        name: server-build
        path: server/dist/

    - name: Deploy to Heroku Production
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: mental-math-app
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: false
        appdir: "."

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit: ${{ github.sha }}
          
          ## Changes
          - View the full diff: https://github.com/${{ github.repository }}/compare/v${{ github.run_number - 1 }}...v${{ github.run_number }}
        draft: false
        prerelease: false

  # Lighthouse Performance Test
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging-mentalmath.herokuapp.com
          https://staging-mentalmath.herokuapp.com/login
          https://staging-mentalmath.herokuapp.com/about
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # E2E Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Run Playwright tests
      run: npx playwright test
      env:
        BASE_URL: https://staging-mentalmath.herokuapp.com

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/

  # Notify on Failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, deploy-staging, deploy-production]
    if: failure()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          client-build
          server-build
